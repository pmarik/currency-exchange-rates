{"version":3,"sources":["components/card/Card.component.jsx","components/card-list/Card-List.component.jsx","components/search-box/Search-Box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","currency","name","substring","rate","toFixed","CardList","currencies","map","key","id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","axios","get","then","res","ratesArray","idPlaceholder","Object","entries","data","rates","currencyObj","push","this","filteredCurrencies","filter","toLowerCase","includes","loader","class","viewBox","cx","cy","r","fill","stroke","stroke-width","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qYAWeA,G,YARF,SAACC,GAAD,OACT,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,WAAWC,IAAI,eAAeC,IAAG,sCAAiCH,EAAMI,SAASC,KAAKC,UAAU,EAAE,GAAjE,kBAChD,4BAAKN,EAAMI,SAASC,MACpB,wCAAcL,EAAMI,SAASG,KAAKC,QAAQ,GAA1C,IAA+CR,EAAMI,SAASC,SCKvDI,EARE,SAACT,GAAD,OACb,yBAAKC,UAAU,aACVD,EAAMU,WAAWC,KAAI,SAAAP,GAAQ,OAC1B,kBAAC,EAAD,CAAMQ,IAAKR,EAASS,GAAIT,SAAUA,SCJjCU,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACIf,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCqEHG,G,kBAtEb,aAAc,IAAD,8BACX,+CAgCFH,aAAe,SAACI,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,QAAS,gBA/B9C,EAAKC,MAAQ,CACXf,WAAY,GACZY,YAAa,IALJ,E,iFASQ,IAAD,OAKlBI,IAAMC,IAAI,mDAAmDC,MAAK,SAAAC,GAIhE,IAHA,IAAMC,EAAa,GACfC,EAAgB,EAEpB,MAAyBC,OAAOC,QAAQJ,EAAIK,KAAKC,OAAjD,eAAyD,CAAC,IAAD,0BAEnDC,EAAc,CAChB,GAAML,EACN,KAJqD,KAKrD,KALqD,MAOvDD,EAAWO,KAAKD,GAChBL,IAGF,EAAKV,SAAS,CAAEX,WAAYoB,S,+BASvB,IAAD,EAC8BQ,KAAKb,MAAjCf,EADF,EACEA,WAAYY,EADd,EACcA,YACdiB,EAAqB7B,EAAW8B,QAAO,SAAApC,GAC3C,OAAOA,EAASC,KAAKoC,cAAcC,SAASpB,EAAYmB,kBAGpDE,EACF,yBAAKC,MAAM,uBACT,yBAAKA,MAAM,UACT,yBAAKA,MAAM,kBAAiBC,QAAQ,eAClC,4BAAQD,MAAM,cAAcE,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,KAAK,OAAOC,OAAO,UAAUC,eAAa,SAMvG,OACE,yBAAKlD,UAAU,OACb,gDACA,kBAAC,EAAD,CACEc,YAAY,oBACZC,aAAcsB,KAAKtB,eAGC,GAArBN,EAAW0C,OAAcT,EAAS,kBAAC,EAAD,CAAUjC,WAAY6B,IACxDjB,EAAY8B,OAAS,GAAkC,GAA7Bb,EAAmBa,QAAgB,0D,GAhEpDC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.e1ba4cc3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nconst Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img className=\"card-img\" alt=\"country flag\" src={`https://www.countryflags.io/${props.currency.name.substring(0,2)}/flat/64.png`}/>\r\n        <h2>{props.currency.name}</h2>\r\n        <p>$1 USD =  {props.currency.rate.toFixed(2)} {props.currency.name}</p>\r\n    </div>\r\n);\r\n\r\nexport default Card;","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport Card from '../card/Card.component';\r\n\r\nconst CardList = (props) => (\r\n    <div className=\"card-list\">\r\n        {props.currencies.map(currency => (\r\n            <Card key={currency.id} currency={currency}/>\r\n        ))}\r\n    </div>\r\n)\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n        className=\"search\"\r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange}\r\n    />\r\n)\r\n\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport CardList from './components/card-list/Card-List.component';\nimport { SearchBox } from './components/search-box/Search-Box.component';\nimport './App.css';\n\nclass App extends Component { \n  constructor(){\n    super();\n\n    this.state = {\n      currencies: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    // fetch('https://api.exchangeratesapi.io/latest?base=USD')\n    //   .then(res => res.json()\n    //   .then(users => console.log(users)))\n\n    axios.get('https://api.exchangeratesapi.io/latest?base=USD').then(res => {\n      const ratesArray = [];\n      let idPlaceholder = 0;\n\n      for (let [key, value] of Object.entries(res.data.rates)) {\n\n        let currencyObj = {\n          \"id\": idPlaceholder,\n          \"name\": key,\n          \"rate\": value\n        }\n        ratesArray.push(currencyObj);\n        idPlaceholder++;\n      }\n\n      this.setState({ currencies: ratesArray});\n    })\n  }\n\n  handleChange = (e) =>{\n   this.setState({ searchField: e.target.value }, () =>{\n   })\n  }\n\n  render(){\n    const { currencies, searchField } = this.state;\n    const filteredCurrencies = currencies.filter(currency => {\n      return currency.name.toLowerCase().includes(searchField.toLowerCase())\n     } );  \n\n    const loader = (\n        <div class=\"profile-main-loader\">\n          <div class=\"loader\">\n            <svg class=\"circular-loader\"viewBox=\"25 25 50 50\" >\n              <circle class=\"loader-path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"#7dc7e2\" stroke-width=\"2\" />\n            </svg>\n          </div>\n        </div>\n    );\n\n    return (\n      <div className=\"App\">\n        <h1> Exchange Rates </h1>\n        <SearchBox \n          placeholder='search currencies'\n          handleChange={this.handleChange}\n        />\n\n        {currencies.length == 0 ? loader : <CardList currencies={filteredCurrencies} /> } \n        {searchField.length > 0 && filteredCurrencies.length == 0 && (<h2>Currency not found...</h2>)}\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}